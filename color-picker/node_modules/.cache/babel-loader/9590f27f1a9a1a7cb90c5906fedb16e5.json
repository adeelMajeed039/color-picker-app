{"ast":null,"code":"import _defineProperty from \"/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/NewPaletteForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport PaletteFormNav from './PaletteFormNav';\nimport ColorPickerForm from './ColorPickerForm';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport { arrayMove } from 'react-sortable-hoc';\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  drawerHeader: _objectSpread({\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\"\n  }, theme.mixins.toolbar, {\n    justifyContent: \"flex-end\"\n  }),\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  },\n  container: {\n    width: \"90%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  buttons: {\n    width: \"100%\"\n  },\n  button: {\n    width: \"50%\"\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    console.log('*************', this.props.palettes[0].colors);\n    this.state = {\n      open: true,\n      colors: this.props.palettes[0].colors\n    };\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeColor = this.removeColor.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.addRandomColor = this.addRandomColor.bind(this); // this.onSortEnd = this.onSortEnd.bind(this);\n  }\n\n  addNewColor(newColor) {\n    this.setState({\n      colors: [...this.state.colors, newColor],\n      newColorName: \"\"\n    });\n  }\n\n  clearColors() {\n    this.setState({\n      colors: []\n    });\n  }\n\n  addRandomColor() {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    var rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    this.setState({\n      colors: [...this.state.colors, randomColor]\n    }); // console.log(allColors);\n  }\n\n  handleSubmit(newPaletteName) {\n    const newPalette = {\n      paletteName: newPaletteName,\n      id: newPaletteName.toLowerCase().replace(/ /g, \"-\"),\n      colors: this.state.colors\n    };\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  }\n\n  removeColor(colorName) {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          maxColors = _this$props.maxColors,\n          palettes = _this$props.palettes;\n    const _this$state = this.state,\n          open = _this$state.open,\n          colors = _this$state.colors;\n    console.log('================', this.colors);\n    const paletteIsFull = colors.length >= maxColors; // console.log(maxColors);\n\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(PaletteFormNav, {\n      open: open,\n      palettes: palettes,\n      handleSubmit: this.handleSubmit,\n      handleDrawerOpen: this.handleDrawerOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      className: classes.buttons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearColors,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Clear Palette\"), React.createElement(Button, {\n      variant: \"contained\",\n      className: classes.button,\n      color: \"primary\",\n      onClick: this.addRandomColor,\n      disabled: paletteIsFull,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"RandomColor\")), React.createElement(ColorPickerForm, {\n      paletteIsFull: paletteIsFull,\n      addNewColor: this.addNewColor,\n      colors: colors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }))), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(DraggableColorList, {\n      colors: this.colors,\n      removeColor: this.removeColor,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/NewPaletteForm.js"],"names":["React","Component","classNames","withStyles","PaletteFormNav","ColorPickerForm","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","Button","DraggableColorList","arrayMove","drawerWidth","styles","theme","root","display","hide","drawer","width","flexShrink","drawerPaper","alignItems","drawerHeader","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","contentShift","easeOut","enteringScreen","container","flexDirection","buttons","button","NewPaletteForm","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","onSortEnd","oldIndex","newIndex","colors","console","log","palettes","state","addNewColor","bind","handleSubmit","removeColor","clearColors","addRandomColor","newColor","newColorName","allColors","map","p","flat","rand","Math","floor","random","length","randomColor","newPaletteName","newPalette","paletteName","id","toLowerCase","replace","savePalette","history","push","colorName","filter","color","name","render","classes","maxColors","paletteIsFull","paper","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport PaletteFormNav from './PaletteFormNav';\nimport ColorPickerForm from './ColorPickerForm';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport { arrayMove } from 'react-sortable-hoc';\n\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\",\n  },\n \n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0,\n  },\n  container: {\n    width: \"90%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  buttons: {\n    width: \"100%\"\n  },\n  button: {\n    width: \"50%\"\n  }\n});\n\nclass NewPaletteForm extends Component {\n  static defaultProps = {\n    maxColors: 20\n  };\n  constructor(props){\n    super(props);\n    console.log('*************', this.props.palettes[0].colors)\n    this.state = {\n      open: true,\n      colors: this.props.palettes[0].colors\n    };\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeColor = this.removeColor.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.addRandomColor = this.addRandomColor.bind(this);\n      // this.onSortEnd = this.onSortEnd.bind(this);\n  }\n    \n  handleDrawerOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ open: false });\n  };\n  \n  addNewColor(newColor) {\n    this.setState({ \n      colors: [...this.state.colors, newColor], \n      newColorName: \"\" \n    });\n  }\n\n  clearColors(){\n    this.setState({ colors : [] });\n  }\n    \n  addRandomColor() {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    var rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    this.setState({ colors: [...this.state.colors, randomColor] });\n    // console.log(allColors);\n  }\n\n  handleSubmit(newPaletteName) {\n    const newPalette = {\n      paletteName: newPaletteName,\n      id: newPaletteName.toLowerCase().replace(/ /g, \"-\"),\n      colors: this.state.colors\n    };\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  }\n  \n  removeColor(colorName) {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  }\n  \n  onSortEnd = ({ oldIndex, newIndex }) => {\n    this.setState(({ colors }) => ({\n      colors: arrayMove(colors, oldIndex, newIndex),\n    }));\n  };\n   \n  render(){ \n    const { classes, maxColors, palettes } = this.props;\n    const { open, colors } = this.state;\n    console.log('================',this.colors)\n    const paletteIsFull = colors.length >= maxColors;\n// console.log(maxColors);\n      return (\n        <div className={classes.root}>\n          <PaletteFormNav \n            open={open} \n            palettes={palettes} \n            handleSubmit={this.handleSubmit}\n            handleDrawerOpen={this.handleDrawerOpen}\n          />\n          <Drawer\n            className={classes.drawer}\n            variant='persistent'\n            anchor='left'\n            open={open}\n            classes={{\n              paper: classes.drawerPaper\n            }}\n          >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={this.handleDrawerClose}>\n                <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <div className={classes.container}>\n          <Typography variant='h4' gutterBottom>\n            Design Your Palette\n          </Typography>\n          <div className={classes.buttons}>\n              <Button \n                variant=\"contained\" \n                color=\"secondary\" \n                onClick={this.clearColors}\n                className={classes.button}\n              >\n                Clear Palette\n              </Button>\n              <Button \n                variant=\"contained\" \n                className={classes.button}\n                color=\"primary\"\n                onClick={this.addRandomColor}\n                disabled={paletteIsFull}\n              >\n                RandomColor\n              </Button>\n            </div>             \n            <ColorPickerForm  \n              paletteIsFull={paletteIsFull} \n              addNewColor={this.addNewColor}\n              colors={colors}\n            />\n            </div>\n          </Drawer>\n          <main\n            className={classNames(classes.content, {\n              [classes.contentShift]: open,\n            })}\n          >\n            <div className={classes.drawerHeader} />\n            <DraggableColorList \n              colors={this.colors}\n              removeColor={this.removeColor}\n              axis='xy'\n              onSortEnd={this.onSortEnd}\n            />\n          </main>\n        </div>\n      );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}