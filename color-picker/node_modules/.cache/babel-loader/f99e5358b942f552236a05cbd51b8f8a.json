{"ast":null,"code":"var _jsxFileName = \"/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/ColorPickerForm.js\";\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport PaletteFormNav from './PaletteFormNav';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nimport { arrayMove } from 'react-sortable-hoc';\nimport seedColors from './seedColors';\n\nclass ColorPickerForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentColor: \"red\",\n      newColorName: \"\"\n    };\n    this.updateCurrentColor = this.updateCurrentColor.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value => this.state.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase()));\n    ValidatorForm.addValidationRule(\"isColorUnique\", value => this.state.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n  }\n\n  updateCurrentColor(newColor) {\n    console.log(newColor);\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  handleSubmit() {\n    const newColor = {\n      color: this.state.currentColor,\n      name: this.state.newColorName\n    };\n    this.props.addNewColor(newColor);\n    this.setState({\n      newColorName: \"\"\n    });\n  }\n\n  render() {\n    const paletteIsFull = this.props.paletteIsFull;\n    const _this$state = this.state,\n          currentColor = _this$state.currentColor,\n          newColorName = _this$state.newColorName;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(ChromePicker, {\n      color: currentColor,\n      onChangeComplete: this.updateCurrentColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.handleSubmit,\n      ref: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: newColorName,\n      name: \"newColorName\",\n      onChange: this.handleChange,\n      validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n      errorMessages: [\"Enter a color name\", \"Color name must beUnique\", \"Color already used!\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      color: \"primary\",\n      disabled: paletteIsFull,\n      style: {\n        backgroundColor: paletteIsFull ? \"grey\" : currentColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, paletteIsFull ? \"Palette Full\" : \"Add Color\")));\n  }\n\n}\n\nexport default ColorPickerForm;","map":{"version":3,"sources":["/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/ColorPickerForm.js"],"names":["React","Component","classNames","withStyles","PaletteFormNav","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","Button","DraggableColorList","ValidatorForm","TextValidator","ChromePicker","arrayMove","seedColors","ColorPickerForm","constructor","props","state","currentColor","newColorName","updateCurrentColor","bind","handleChange","handleSubmit","componentDidMount","addValidationRule","value","colors","every","name","toLowerCase","color","newColor","console","log","setState","hex","evt","target","addNewColor","render","paletteIsFull","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport PaletteFormNav from './PaletteFormNav';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nimport { arrayMove } from 'react-sortable-hoc';\nimport seedColors from './seedColors';\n\n\nclass ColorPickerForm extends Component {\n    constructor(props){\n        super(props);\n            this.state = {\n                currentColor: \"red\",\n                newColorName: \"\"\n            };\n        this.updateCurrentColor = this.updateCurrentColor.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        ValidatorForm.addValidationRule(\"isColorNameUnique\", value =>\n          this.state.colors.every(\n            ({ name }) => name.toLowerCase() !== value.toLowerCase()\n          )\n        );\n        ValidatorForm.addValidationRule(\"isColorUnique\", value =>\n          this.state.colors.every(({ color }) => color  !== this.state.currentColor)\n        );\n        \n    }\n  \n    updateCurrentColor(newColor){\n        console.log(newColor);\n        this.setState({ currentColor: newColor.hex });\n    }\n    \n    handleChange(evt) {\n        this.setState({\n          [evt.target.name]: evt.target.value\n        });\n    }\n\n    handleSubmit(){\n        const newColor = {\n            color: this.state.currentColor,\n            name: this.state.newColorName\n        };\n        this.props.addNewColor(newColor);\n        this.setState({ newColorName: \"\" });\n    }\n  \n    render(){\n        const { paletteIsFull } = this.props;\n        const { currentColor, newColorName } =this.state;\n        return(\n            <div>\n                <ChromePicker \n                    color={currentColor}\n                    onChangeComplete={this.updateCurrentColor}\n                />\n                <ValidatorForm onSubmit={this.handleSubmit} ref='form'>\n                  <TextValidator \n                    value={newColorName} \n                    name='newColorName'\n                    onChange={this.handleChange}\n                    validators={[\"required\",\"isColorNameUnique\",\"isColorUnique\"]}\n                    errorMessages={[\n                      \"Enter a color name\",\n                      \"Color name must beUnique\",\n                      \"Color already used!\" \n                    ]}\n                  />\n                  <Button \n                    variant='contained'\n                    type='submit'\n                    color='primary' \n                    disabled={paletteIsFull}\n                    style={{ backgroundColor: paletteIsFull \n                      ? \"grey\" \n                      : currentColor \n                    }}\n                  >\n                    {paletteIsFull ? \"Palette Full\" : \"Add Color\"}\n                  </Button>\n                </ValidatorForm>\n            </div>\n        )\n    }\n}\n\nexport default ColorPickerForm;"]},"metadata":{},"sourceType":"module"}