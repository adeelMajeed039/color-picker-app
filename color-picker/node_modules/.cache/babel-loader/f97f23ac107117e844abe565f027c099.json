{"ast":null,"code":"import _defineProperty from \"/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/NewPaletteForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport PaletteFormNav from './PaletteFormNav';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nimport { arrayMove } from 'react-sortable-hoc';\nconst drawerWidth = 300;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: \"calc(100% - \".concat(drawerWidth, \"px)\"),\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: 20,\n    marginLeft: 12\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: _objectSpread({\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\"\n  }, theme.mixins.toolbar, {\n    justifyContent: \"flex-end\"\n  }),\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.state = {\n      open: true,\n      currentColor: \"red\",\n      newColorName: \"\",\n      colors: this.props.palettes[0].colors\n    };\n    this.updateCurrentColor = this.updateCurrentColor.bind(this);\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeColor = this.removeColor.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.addRandomColor = this.addRandomColor.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value => this.state.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase()));\n    ValidatorForm.addValidationRule(\"isColorUnique\", value => this.state.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n  }\n\n  updateCurrentColor(newColor) {\n    console.log(newColor);\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  addNewColor() {\n    const newColor = {\n      color: this.state.currentColor,\n      name: this.state.newColorName\n    };\n    this.setState({\n      colors: [...this.state.colors, newColor],\n      newColorName: \"\"\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  clearColors() {\n    this.setState({\n      colors: []\n    });\n  }\n\n  addRandomColor() {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    var rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    this.setState({\n      colors: [...this.state.colors, randomColor]\n    }); // console.log(allColors);\n  }\n\n  handleSubmit(newPaletteName) {\n    const newPalette = {\n      paletteName: newPaletteName,\n      id: newPaletteName.toLowerCase().replace(/ /g, \"-\"),\n      colors: this.state.colors\n    };\n    this.props.savePalette(newPalette);\n    this.props.history.push('/');\n  }\n\n  removeColor(colorName) {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          maxColors = _this$props.maxColors,\n          palettes = _this$props.palettes;\n    const _this$state = this.state,\n          open = _this$state.open,\n          colors = _this$state.colors;\n    const paletteIsFull = colors.length >= maxColors;\n    console.log(maxColors);\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(PaletteFormNav, {\n      open: open,\n      classes: classes,\n      palettes: palettes,\n      handleSubmit: this.handleSubmit,\n      handleDrawerOpen: this.handleDrawerOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearColors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Clear Palette\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.addRandomColor,\n      disabled: paletteIsFull,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"RandomColor\")), React.createElement(ChromePicker, {\n      color: this.state.currentColor,\n      onChangeComplete: this.updateCurrentColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: this.state.newColorName,\n      name: \"newColorName\",\n      onChange: this.handleChange,\n      validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n      errorMessages: [\"Enter a color name\", \"Color name must beUnique\", \"Color already used!\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      color: \"primary\",\n      disabled: paletteIsFull,\n      style: {\n        backgroundColor: paletteIsFull ? \"grey\" : this.state.currentColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, paletteIsFull ? \"Palette Full\" : \"Add Color\"))), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(DraggableColorList, {\n      colors: this.colors,\n      removeColor: this.removeColor,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    })));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/NewPaletteForm.js"],"names":["React","Component","classNames","withStyles","PaletteFormNav","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","Button","DraggableColorList","ValidatorForm","TextValidator","ChromePicker","arrayMove","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","contentShift","NewPaletteForm","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","onSortEnd","oldIndex","newIndex","colors","state","currentColor","newColorName","palettes","updateCurrentColor","bind","addNewColor","handleChange","handleSubmit","removeColor","clearColors","addRandomColor","componentDidMount","addValidationRule","value","every","name","toLowerCase","color","newColor","console","log","hex","evt","target","allColors","map","p","flat","rand","Math","floor","random","length","randomColor","newPaletteName","newPalette","paletteName","id","replace","savePalette","history","push","colorName","filter","render","classes","maxColors","paletteIsFull","paper","backgroundColor","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport PaletteFormNav from './PaletteFormNav';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nimport { arrayMove } from 'react-sortable-hoc';\n\nconst drawerWidth = 300;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: 20,\n    marginLeft: 12\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0,\n  },\n});\n\nclass NewPaletteForm extends Component{\n  static defaultProps = {\n    maxColors: 20\n  };\n  constructor(props){\n     super(props);\n     this.state = {\n       open: true,\n       currentColor: \"red\",\n       newColorName: \"\",\n       colors: this.props.palettes[0].colors\n      };\n      this.updateCurrentColor = this.updateCurrentColor.bind(this);\n      this.addNewColor = this.addNewColor.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.removeColor = this.removeColor.bind(this);\n      this.clearColors = this.clearColors.bind(this);\n      this.addRandomColor = this.addRandomColor.bind(this);\n    }\n\n    componentDidMount() {\n      ValidatorForm.addValidationRule(\"isColorNameUnique\", value =>\n        this.state.colors.every(\n          ({ name }) => name.toLowerCase() !== value.toLowerCase()\n        )\n      );\n      ValidatorForm.addValidationRule(\"isColorUnique\", value =>\n        this.state.colors.every(({ color }) => color  !== this.state.currentColor)\n      );\n      \n    }\n\n   handleDrawerOpen = () => {\n       this.setState({ open: true });\n   };\n\n   handleDrawerClose = () => {\n       this.setState({ open: false });\n    };\n\n    updateCurrentColor(newColor){\n      console.log(newColor);\n      this.setState({ currentColor: newColor.hex });\n    }\n\n    addNewColor() {\n      const newColor = {\n        color: this.state.currentColor,\n        name: this.state.newColorName\n      };\n      this.setState({ colors: [...this.state.colors, newColor], newColorName: \"\" });\n    }\n\n    handleChange(evt) {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    }\n\n    clearColors(){\n      this.setState({ colors : [] });\n    }\n    \n    addRandomColor() {\n      const allColors = this.props.palettes.map(p => p.colors).flat();\n      var rand = Math.floor(Math.random() * allColors.length);\n      const randomColor = allColors[rand];\n      this.setState({ colors: [...this.state.colors, randomColor] });\n      // console.log(allColors);\n    }\n\n    handleSubmit(newPaletteName) {\n      const newPalette = {\n        paletteName: newPaletteName,\n        id: newPaletteName.toLowerCase().replace(/ /g, \"-\"),\n        colors: this.state.colors\n      };\n      this.props.savePalette(newPalette);\n      this.props.history.push('/');\n    }\n    removeColor(colorName) {\n      this.setState({\n        colors: this.state.colors.filter(color => color.name !== colorName)\n      });\n    }\n    onSortEnd = ({ oldIndex, newIndex }) => {\n      this.setState(({ colors }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex),\n      }));\n    }\n   render(){ \n       const { classes, maxColors, palettes } = this.props;\n       const { open, colors } = this.state;\n        const paletteIsFull = colors.length >= maxColors;\nconsole.log(maxColors);\n       return (\n            <div className={classes.root}>\n            <PaletteFormNav \n              open={open} \n              classes={classes} \n              palettes={palettes} \n              handleSubmit={this.handleSubmit}\n              handleDrawerOpen={this.handleDrawerOpen}\n            />\n            <Drawer\n                className={classes.drawer}\n                variant=\"persistent\"\n                anchor=\"left\"\n                open={open}\n                classes={{\n                paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                  <IconButton onClick={this.handleDrawerClose}>\n                      <ChevronLeftIcon />\n                  </IconButton>\n                </div>\n                <Divider />\n                <Typography variant=\"h4\">\n                  Design Your Palette\n                </Typography>\n                <div>\n                  <Button \n                    variant=\"contained\" \n                    color=\"secondary\" \n                    onClick={this.clearColors}\n                  >\n                    Clear Palette\n                  </Button>\n                  <Button \n                    variant=\"contained\" \n                    color=\"primary\"\n                    onClick={this.addRandomColor}\n                    disabled={paletteIsFull}\n                  >\n                    RandomColor\n                  </Button>\n                </div>\n                <ChromePicker \n                  color={this.state.currentColor}\n                  onChangeComplete={this.updateCurrentColor}\n                />\n                <ValidatorForm onSubmit={this.addNewColor}>\n                  <TextValidator \n                    value={this.state.newColorName} \n                    name=\"newColorName\"\n                    onChange={this.handleChange}\n                    validators={[\"required\",\"isColorNameUnique\",\"isColorUnique\"]}\n                    errorMessages={[\n                      \"Enter a color name\",\n                      \"Color name must beUnique\",\n                      \"Color already used!\" \n                    ]}\n                  />\n                  <Button \n                    variant=\"contained\" \n                    type=\"submit\" \n                    color=\"primary\" \n                    disabled={paletteIsFull}\n                    style={{ backgroundColor: paletteIsFull \n                      ? \"grey\" \n                      : this.state.currentColor \n                    }}\n                  >\n                    {paletteIsFull ? \"Palette Full\" : \"Add Color\"}\n                  </Button>\n                </ValidatorForm>\n                \n            </Drawer>\n            <main\n                className={classNames(classes.content, {\n                [classes.contentShift]: open,\n                })}\n            >\n            <div className={classes.drawerHeader} />\n              <DraggableColorList \n                colors={this.colors}\n                removeColor={this.removeColor}\n                axis='xy'\n                onSortEnd={this.onSortEnd}\n              />\n            </main>\n          </div>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}