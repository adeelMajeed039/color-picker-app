{"ast":null,"code":"import _defineProperty from \"/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/NewPaletteForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorBox from './DraggableColorBox';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nconst drawerWidth = 300;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: \"calc(100% - \".concat(drawerWidth, \"px)\"),\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: 20,\n    marginLeft: 12\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: _objectSpread({\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\"\n  }, theme.mixins.toolbar, {\n    justifyContent: \"flex-end\"\n  }),\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.state = {\n      open: true,\n      currentColor: \"red\",\n      newName: \"\",\n      colors: []\n    };\n    this.updateCurrentColor = this.updateCurrentColor.bind(this);\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isColorNameUnique', value => {\n      this.state.color.every(({\n        name\n      }) => name.toLowerCase() !== value.toLowerCase());\n    });\n  }\n\n  updateCurrentColor(newColor) {\n    console.log(newColor);\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  addNewColor() {\n    const newColor = {\n      color: this.state.currentColor,\n      name: this.state.newName\n    };\n    this.setState({\n      colors: [...this.state.colors, newColor]\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      newName: evt.target.value\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          theme = _this$props.theme;\n    const open = this.state.open;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(CssBaseline, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(AppBar, {\n      position: \"fixed\",\n      className: classNames(classes.appBar, {\n        [classes.appBarShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      disableGutters: !open,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      \"aria-label\": \"open drawer\",\n      onClick: this.handleDrawerOpen,\n      edge: \"start\",\n      className: classNames(classes.menuButton, open && classes.hide),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(MenuIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      variant: \"h6\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Persistent drawer\"))), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Clear Palette\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"RandomColor\")), React.createElement(ChromePicker, {\n      color: this.state.currentColor,\n      onChangeComplete: this.updateCurrentColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: this.state.newName,\n      onChange: this.handleChange,\n      validators: [\"required\", \"isColorNameUnique\"],\n      errorMessages: [\"this field is required\", \"color name isNot Valid\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      color: \"primary\",\n      style: {\n        backgroundColor: this.state.currentColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Add Color\"))), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), this.state.colors.map(color => React.createElement(DraggableColorBox, {\n      color: color.color,\n      name: color.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/NewPaletteForm.js"],"names":["React","Component","classNames","withStyles","Drawer","CssBaseline","AppBar","Toolbar","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","Button","DraggableColorBox","ValidatorForm","TextValidator","ChromePicker","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","contentShift","NewPaletteForm","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","state","currentColor","newName","colors","updateCurrentColor","bind","addNewColor","handleChange","componentDidMount","addValidationRule","value","color","every","name","toLowerCase","newColor","console","log","hex","evt","target","render","classes","paper","backgroundColor","map","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorBox from './DraggableColorBox';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\n\nconst drawerWidth = 300;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: 20,\n    marginLeft: 12\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0,\n  },\n});\n\nclass NewPaletteForm extends Component{\n   constructor(props){\n     super(props);\n     this.state = {\n       open: true,\n       currentColor: \"red\",\n       newName: \"\",\n       colors: []\n      };\n      this.updateCurrentColor = this.updateCurrentColor.bind(this);\n      this.addNewColor = this.addNewColor.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n    }\n    componentDidMount() {\n      ValidatorForm.addValidationRule('isColorNameUnique',(value) => {\n        this.state.color.every(\n          ({ name }) => name.toLowerCase() !== value.toLowerCase()\n        );\n      });\n    }\n   handleDrawerOpen = () => {\n       this.setState({ open: true });\n   };\n   handleDrawerClose = () => {\n       this.setState({ open: false });\n    };\n    updateCurrentColor(newColor){\n      console.log(newColor);\n      this.setState({ currentColor: newColor.hex });\n    }\n    addNewColor() {\n      const newColor = {\n        color: this.state.currentColor,\n        name: this.state.newName\n      };\n      this.setState({ colors: [...this.state.colors, newColor] });\n    }\n    handleChange(evt) {\n      this.setState({ newName: evt.target.value });\n\n    }\n   render(){ \n       const { classes, theme } = this.props;\n       const { open } = this.state;\n\n       return (\n            <div className={classes.root}>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                className={classNames(classes.appBar, {\n                [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar disableGutters={!open}>\n                <IconButton\n                    color=\"inherit\"\n                    aria-label=\"open drawer\"\n                    onClick={this.handleDrawerOpen}\n                    edge=\"start\"\n                    className={classNames(classes.menuButton, open && classes.hide)}\n                >\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" noWrap>\n                    Persistent drawer\n                </Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                className={classes.drawer}\n                variant=\"persistent\"\n                anchor=\"left\"\n                open={open}\n                classes={{\n                paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                  <IconButton onClick={this.handleDrawerClose}>\n                      <ChevronLeftIcon />\n                  </IconButton>\n                </div>\n                <Divider />\n                <Typography variant=\"h4\">\n                  Design Your Palette\n                </Typography>\n                <div>\n                  <Button variant=\"contained\" color=\"secondary\">\n                    Clear Palette\n                  </Button>\n                  <Button variant=\"contained\" color=\"primary\">\n                    RandomColor\n                  </Button>\n                </div>\n                <ChromePicker \n                  color={this.state.currentColor}\n                  onChangeComplete={this.updateCurrentColor}\n                />\n                <ValidatorForm onSubmit={this.addNewColor}>\n                  <TextValidator \n                    value={this.state.newName} \n                    onChange={this.handleChange}\n                    validators={[\"required\", \"isColorNameUnique\"]}\n                    errorMessages={[\"this field is required\", \"color name isNot Valid\"]}\n                  />\n                  <Button \n                    variant=\"contained\" \n                    type=\"submit\"\n                    color=\"primary\" \n                    style={{ backgroundColor: this.state.currentColor }}\n                  >\n                    Add Color\n                  </Button>\n                </ValidatorForm>\n                \n            </Drawer>\n            <main\n                className={classNames(classes.content, {\n                [classes.contentShift]: open,\n                })}\n            >\n            <div className={classes.drawerHeader} />\n              {this.state.colors.map(color => (\n                <DraggableColorBox color={color.color} name={color.name}/>\n              ))}\n            </main>\n          </div>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}