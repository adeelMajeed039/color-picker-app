{"ast":null,"code":"var _jsxFileName = \"/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/ColorPickerForm.js\";\nimport React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { ChromePicker } from \"react-color\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles/ColorPickerFormStyles\";\n\nclass ColorPickerForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentColor: \"teal\",\n      newColorName: \"\"\n    };\n    this.updateCurrentColor = this.updateCurrentColor.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value => this.props.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase()));\n    ValidatorForm.addValidationRule(\"isColorUnique\", value => this.props.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n  }\n\n  updateCurrentColor(newColor) {\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  handleSubmit() {\n    const newColor = {\n      color: this.state.currentColor,\n      name: this.state.newColorName\n    };\n    this.props.addNewColor(newColor);\n    this.setState({\n      newColorName: \"\"\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          paletteIsFull = _this$props.paletteIsFull,\n          classes = _this$props.classes;\n    const _this$state = this.state,\n          currentColor = _this$state.currentColor,\n          newColorName = _this$state.newColorName;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(ChromePicker, {\n      color: currentColor,\n      onChangeComplete: this.updateCurrentColor,\n      className: classes.picker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.handleSubmit,\n      ref: \"form\",\n      instantValidate: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: newColorName,\n      className: classes.colorNameInput,\n      placeholder: \"Color Name\",\n      name: \"newColorName\",\n      variant: \"filled\",\n      margin: \"normal\",\n      onChange: this.handleChange,\n      validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n      errorMessages: [\"Enter a color name\", \"Color name must be unique\", \"Color already used!\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      color: \"primary\",\n      disabled: paletteIsFull,\n      className: classes.addColor,\n      style: {\n        backgroundColor: paletteIsFull ? \"grey\" : currentColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, paletteIsFull ? \"Palette Full\" : \"Add Color\")));\n  }\n\n}\n\nexport default withStyles(styles)(ColorPickerForm);","map":{"version":3,"sources":["/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/ColorPickerForm.js"],"names":["React","Component","Button","ValidatorForm","TextValidator","ChromePicker","withStyles","styles","ColorPickerForm","constructor","props","state","currentColor","newColorName","updateCurrentColor","bind","handleChange","handleSubmit","componentDidMount","addValidationRule","value","colors","every","name","toLowerCase","color","newColor","setState","hex","evt","target","addNewColor","render","paletteIsFull","classes","picker","colorNameInput","addColor","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { ChromePicker } from \"react-color\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles/ColorPickerFormStyles\";\n\nclass ColorPickerForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { currentColor: \"teal\", newColorName: \"\" };\n    this.updateCurrentColor = this.updateCurrentColor.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value =>\n      this.props.colors.every(\n        ({ name }) => name.toLowerCase() !== value.toLowerCase()\n      )\n    );\n    ValidatorForm.addValidationRule(\"isColorUnique\", value =>\n      this.props.colors.every(({ color }) => color !== this.state.currentColor)\n    );\n  }\n  updateCurrentColor(newColor) {\n    this.setState({ currentColor: newColor.hex });\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n  handleSubmit() {\n    const newColor = {\n      color: this.state.currentColor,\n      name: this.state.newColorName\n    };\n    this.props.addNewColor(newColor);\n    this.setState({ newColorName: \"\" });\n  }\n\n  render() {\n    const { paletteIsFull, classes } = this.props;\n    const { currentColor, newColorName } = this.state;\n    return (\n      <div>\n        <ChromePicker\n          color={currentColor}\n          onChangeComplete={this.updateCurrentColor}\n          className={classes.picker}\n        />\n        <ValidatorForm\n          onSubmit={this.handleSubmit}\n          ref='form'\n          instantValidate={false}\n        >\n          <TextValidator\n            value={newColorName}\n            className={classes.colorNameInput}\n            placeholder='Color Name'\n            name='newColorName'\n            variant='filled'\n            margin='normal'\n            onChange={this.handleChange}\n            validators={[\"required\", \"isColorNameUnique\", \"isColorUnique\"]}\n            errorMessages={[\n              \"Enter a color name\",\n              \"Color name must be unique\",\n              \"Color already used!\"\n            ]}\n          />\n          <Button\n            variant='contained'\n            type='submit'\n            color='primary'\n            disabled={paletteIsFull}\n            className={classes.addColor}\n            style={{\n              backgroundColor: paletteIsFull ? \"grey\" : currentColor\n            }}\n          >\n            {paletteIsFull ? \"Palette Full\" : \"Add Color\"}\n          </Button>\n        </ValidatorForm>\n      </div>\n    );\n  }\n}\nexport default withStyles(styles)(ColorPickerForm);"]},"metadata":{},"sourceType":"module"}