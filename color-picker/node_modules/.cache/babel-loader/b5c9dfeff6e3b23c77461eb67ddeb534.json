{"ast":null,"code":"import _defineProperty from \"/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/NewPaletteForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nimport { arrayMove } from 'react-sortable-hoc';\nconst drawerWidth = 300;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: \"calc(100% - \".concat(drawerWidth, \"px)\"),\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: 20,\n    marginLeft: 12\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: _objectSpread({\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\"\n  }, theme.mixins.toolbar, {\n    justifyContent: \"flex-end\"\n  }),\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.state = {\n      open: true,\n      currentColor: \"red\",\n      newColorName: \"\",\n      colors: this.props.palettes[0].colors,\n      newPaletteName: \"\"\n    };\n    this.updateCurrentColor = this.updateCurrentColor.bind(this);\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeColor = this.removeColor.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.addRandomColor = this.addRandomColor.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value => this.state.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase()));\n    ValidatorForm.addValidationRule(\"isColorUnique\", value => this.state.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => this.props.palettes.every(({\n      paletteName\n    }) => paletteName.toLowerCase() !== value.toLowerCase()));\n  }\n\n  updateCurrentColor(newColor) {\n    console.log(newColor);\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  addNewColor() {\n    const newColor = {\n      color: this.state.currentColor,\n      name: this.state.newColorName\n    };\n    this.setState({\n      colors: [...this.state.colors, newColor],\n      newColorName: \"\"\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  clearColors() {\n    this.setState({\n      colors: []\n    });\n  }\n\n  addRandomColor() {\n    const allColors = this.props.palettes.map(p => p.colors);\n    console.log(allColors);\n  }\n\n  handleSubmit() {\n    const newName = this.state.newPaletteName;\n    const newPalette = {\n      paletteName: newName,\n      id: newName.toLowerCase().replace(/ /g, \"-\"),\n      colors: this.state.colors\n    };\n    this.props.savePalette(newPalette);\n    this.props.history.push('/');\n  }\n\n  removeColor(colorName) {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const open = this.state.open;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(CssBaseline, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(AppBar, {\n      position: \"fixed\",\n      color: \"default\",\n      className: classNames(classes.appBar, {\n        [classes.appBarShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      disableGutters: !open,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      \"aria-label\": \"open drawer\",\n      onClick: this.handleDrawerOpen,\n      edge: \"start\",\n      className: classNames(classes.menuButton, open && classes.hide),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(MenuIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      variant: \"h6\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Persistent drawer\"), React.createElement(ValidatorForm, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      label: \"Palette Name\",\n      value: this.state.newPaletteName,\n      name: \"newPaletteName\",\n      onChange: this.handleChange,\n      validators: [\"required\", \"isPaletteNameUnique\"],\n      errorMessages: [\"Enter PaletteName\", \"Name Already Taken\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Save Palette\")))), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearColors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Clear Palette\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.addRandomColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"RandomColor\")), React.createElement(ChromePicker, {\n      color: this.state.currentColor,\n      onChangeComplete: this.updateCurrentColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: this.state.newColorName,\n      name: \"newColorName\",\n      onChange: this.handleChange,\n      validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n      errorMessages: [\"Enter a color name\", \"Color name must beUnique\", \"Color already used!\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      color: \"primary\",\n      style: {\n        backgroundColor: this.state.currentColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"Add Color\"))), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }), React.createElement(DraggableColorList, {\n      colors: this.state.colors,\n      removeColor: this.removeColor,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/NewPaletteForm.js"],"names":["React","Component","classNames","withStyles","Drawer","CssBaseline","AppBar","Toolbar","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","Button","DraggableColorList","ValidatorForm","TextValidator","ChromePicker","arrayMove","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","contentShift","NewPaletteForm","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","onSortEnd","oldIndex","newIndex","colors","state","currentColor","newColorName","palettes","newPaletteName","updateCurrentColor","bind","addNewColor","handleChange","handleSubmit","removeColor","clearColors","addRandomColor","componentDidMount","addValidationRule","value","every","name","toLowerCase","color","paletteName","newColor","console","log","hex","evt","target","allColors","map","p","newName","newPalette","id","replace","savePalette","history","push","colorName","filter","render","classes","paper","backgroundColor","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nimport { arrayMove } from 'react-sortable-hoc';\n\nconst drawerWidth = 300;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: 20,\n    marginLeft: 12\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0,\n  },\n});\n\nclass NewPaletteForm extends Component{\n   constructor(props){\n     super(props);\n     this.state = {\n       open: true,\n       currentColor: \"red\",\n       newColorName: \"\",\n       colors: this.props.palettes[0].colors,\n       newPaletteName: \"\"\n      };\n      this.updateCurrentColor = this.updateCurrentColor.bind(this);\n      this.addNewColor = this.addNewColor.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.removeColor = this.removeColor.bind(this);\n      this.clearColors = this.clearColors.bind(this);\n      this.addRandomColor = this.addRandomColor.bind(this);\n    }\n\n    componentDidMount() {\n      ValidatorForm.addValidationRule(\"isColorNameUnique\", value =>\n        this.state.colors.every(\n          ({ name }) => name.toLowerCase() !== value.toLowerCase()\n        )\n      );\n      ValidatorForm.addValidationRule(\"isColorUnique\", value =>\n        this.state.colors.every(({ color }) => color  !== this.state.currentColor)\n      );\n      ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value =>\n        this.props.palettes.every(\n          ({ paletteName }) => paletteName.toLowerCase()  !== value.toLowerCase()\n        )\n      );\n    }\n\n   handleDrawerOpen = () => {\n       this.setState({ open: true });\n   };\n\n   handleDrawerClose = () => {\n       this.setState({ open: false });\n    };\n\n    updateCurrentColor(newColor){\n      console.log(newColor);\n      this.setState({ currentColor: newColor.hex });\n    }\n\n    addNewColor() {\n      const newColor = {\n        color: this.state.currentColor,\n        name: this.state.newColorName\n      };\n      this.setState({ colors: [...this.state.colors, newColor], newColorName: \"\" });\n    }\n\n    handleChange(evt) {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    }\n\n    clearColors(){\n      this.setState({ colors : []})\n    }\n    \n    addRandomColor() {\n      const allColors = this.props.palettes.map(p => p.colors);\n      console.log(allColors);\n    }\n\n    handleSubmit() {\n      const newName = this.state.newPaletteName;\n      const newPalette = {\n        paletteName: newName,\n        id: newName.toLowerCase().replace(/ /g, \"-\"),\n        colors: this.state.colors\n      };\n      this.props.savePalette(newPalette);\n      this.props.history.push('/');\n    }\n    removeColor(colorName) {\n      this.setState({\n        colors: this.state.colors.filter(color => color.name !== colorName)\n      });\n    }\n    onSortEnd = ({ oldIndex, newIndex }) => {\n      this.setState(({ colors }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex),\n      }));\n    }\n   render(){ \n       const { classes } = this.props;\n       const { open } = this.state;\n\n       return (\n            <div className={classes.root}>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                color=\"default\"\n                className={classNames(classes.appBar, {\n                [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar disableGutters={!open}>\n                <IconButton\n                    color=\"inherit\"\n                    aria-label=\"open drawer\"\n                    onClick={this.handleDrawerOpen}\n                    edge=\"start\"\n                    className={classNames(classes.menuButton, open && classes.hide)}\n                >\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" noWrap>\n                    Persistent drawer\n                </Typography>\n                <ValidatorForm onSubmit={this.handleSubmit} >\n                  <TextValidator \n                    label=\"Palette Name\"\n                    value={this.state.newPaletteName}\n                    name=\"newPaletteName\"\n                    onChange={this.handleChange}\n                    validators={[\"required\", \"isPaletteNameUnique\"]}\n                    errorMessages={[\"Enter PaletteName\", \"Name Already Taken\"]}\n                  />\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                    Save Palette\n                  </Button>\n                </ValidatorForm>\n                \n                </Toolbar>\n                \n            </AppBar>\n            <Drawer\n                className={classes.drawer}\n                variant=\"persistent\"\n                anchor=\"left\"\n                open={open}\n                classes={{\n                paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                  <IconButton onClick={this.handleDrawerClose}>\n                      <ChevronLeftIcon />\n                  </IconButton>\n                </div>\n                <Divider />\n                <Typography variant=\"h4\">\n                  Design Your Palette\n                </Typography>\n                <div>\n                  <Button \n                    variant=\"contained\" \n                    color=\"secondary\" \n                    onClick={this.clearColors}\n                  >\n                    Clear Palette\n                  </Button>\n                  <Button \n                    variant=\"contained\" \n                    color=\"primary\"\n                    onClick={this.addRandomColor}\n                  >\n                    RandomColor\n                  </Button>\n                </div>\n                <ChromePicker \n                  color={this.state.currentColor}\n                  onChangeComplete={this.updateCurrentColor}\n                />\n                <ValidatorForm onSubmit={this.addNewColor}>\n                  <TextValidator \n                    value={this.state.newColorName} \n                    name=\"newColorName\"\n                    onChange={this.handleChange}\n                    validators={[\"required\",\"isColorNameUnique\",\"isColorUnique\"]}\n                    errorMessages={[\n                      \"Enter a color name\",\n                      \"Color name must beUnique\",\n                      \"Color already used!\" \n                    ]}\n                  />\n                  <Button \n                    variant=\"contained\" \n                    type=\"submit\" \n                    color=\"primary\" \n                    style={{ backgroundColor: this.state.currentColor }}\n                  >\n                    Add Color\n                  </Button>\n                </ValidatorForm>\n                \n            </Drawer>\n            <main\n                className={classNames(classes.content, {\n                [classes.contentShift]: open,\n                })}\n            >\n            <div className={classes.drawerHeader} />\n              <DraggableColorList \n                colors={this.state.colors}\n                removeColor={this.removeColor}\n                axis=\"xy\"\n                onSortEnd={this.onSortEnd}\n              />\n            </main>\n          </div>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}