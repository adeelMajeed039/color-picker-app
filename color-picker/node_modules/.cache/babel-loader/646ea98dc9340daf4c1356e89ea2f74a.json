{"ast":null,"code":"var _jsxFileName = \"/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport PaletteFormNav from './PaletteFormNav';\nimport ColorPickerForm from './ColorPickerForm';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport { arrayMove } from 'react-sortable-hoc';\nimport styles from './styles/NewPaletteFormStyles';\nimport seedColors from './seedColors';\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.state = {\n      open: true,\n      colors: seedColors[0].colors\n    };\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeColor = this.removeColor.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.addRandomColor = this.addRandomColor.bind(this);\n  }\n\n  addNewColor(newColor) {\n    this.setState({\n      colors: [...this.state.colors, newColor],\n      newColorName: \"\"\n    });\n  }\n\n  clearColors() {\n    this.setState({\n      colors: []\n    });\n  }\n\n  addRandomColor() {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    var rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    this.setState({\n      colors: [...this.state.colors, randomColor]\n    });\n  }\n\n  handleSubmit(newPalette) {\n    newPalette.id = newPalette.paletteName.toLowerCase().replace(/ /g, \"-\");\n    newPalette.colors = this.state.colors;\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  }\n\n  removeColor(colorName) {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          maxColors = _this$props.maxColors,\n          palettes = _this$props.palettes;\n    const _this$state = this.state,\n          open = _this$state.open,\n          colors = _this$state.colors;\n    const paletteIsFull = colors.length >= maxColors;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(PaletteFormNav, {\n      open: open,\n      palettes: palettes,\n      handleSubmit: this.handleSubmit,\n      handleDrawerOpen: this.handleDrawerOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      className: classes.buttons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearColors,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Clear Palette\"), React.createElement(Button, {\n      variant: \"contained\",\n      className: classes.button,\n      color: \"primary\",\n      onClick: this.addRandomColor,\n      disabled: paletteIsFull,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"RandomColor\")), React.createElement(ColorPickerForm, {\n      paletteIsFull: paletteIsFull,\n      addNewColor: this.addNewColor,\n      colors: colors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }))), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(DraggableColorList, {\n      colors: colors,\n      removeColor: this.removeColor,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      distance: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/NewPaletteForm.js"],"names":["React","Component","classNames","withStyles","PaletteFormNav","ColorPickerForm","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","Button","DraggableColorList","arrayMove","styles","seedColors","NewPaletteForm","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","onSortEnd","oldIndex","newIndex","colors","state","addNewColor","bind","handleSubmit","removeColor","clearColors","addRandomColor","newColor","newColorName","allColors","palettes","map","p","flat","rand","Math","floor","random","length","randomColor","newPalette","id","paletteName","toLowerCase","replace","savePalette","history","push","colorName","filter","color","name","render","classes","maxColors","paletteIsFull","root","drawer","paper","drawerPaper","drawerHeader","container","buttons","button","content","contentShift","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport PaletteFormNav from './PaletteFormNav';\nimport ColorPickerForm from './ColorPickerForm';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport { arrayMove } from 'react-sortable-hoc';\nimport styles from './styles/NewPaletteFormStyles';\nimport seedColors from './seedColors';\n\nclass NewPaletteForm extends Component {\n  static defaultProps = {\n    maxColors: 20\n  };\n  constructor(props){\n    super(props);\n    this.state = {\n      open: true,\n      colors: seedColors[0].colors\n    };\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeColor = this.removeColor.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.addRandomColor = this.addRandomColor.bind(this);\n  }\n    \n  handleDrawerOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ open: false });\n  };\n  \n  addNewColor(newColor) {\n    this.setState({ \n      colors: [...this.state.colors, newColor], \n      newColorName: \"\" \n    });\n  }\n\n  clearColors(){\n    this.setState({ colors : [] });\n  }\n    \n  addRandomColor() {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    var rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    this.setState({ colors: [...this.state.colors, randomColor] });\n  }\n\n  handleSubmit(newPalette) {\n    newPalette.id = newPalette.paletteName.toLowerCase().replace(/ /g, \"-\");\n    newPalette.colors = this.state.colors;\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  }\n  \n  removeColor(colorName) {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  }\n  \n  onSortEnd = ({ oldIndex, newIndex }) => {\n    this.setState(({ colors }) => ({\n      colors: arrayMove(colors, oldIndex, newIndex),\n    }));\n  };\n   \n  render(){ \n    const { classes, maxColors, palettes } = this.props;\n    const { open, colors } = this.state;\n    const paletteIsFull = colors.length >= maxColors;\n      return (\n        <div className={classes.root}>\n          <PaletteFormNav \n            open={open} \n            palettes={palettes} \n            handleSubmit={this.handleSubmit}\n            handleDrawerOpen={this.handleDrawerOpen}\n          />\n          <Drawer\n            className={classes.drawer}\n            variant='persistent'\n            anchor='left'\n            open={open}\n            classes={{\n              paper: classes.drawerPaper\n            }}\n          >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={this.handleDrawerClose}>\n                <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <div className={classes.container}>\n          <Typography variant='h4' gutterBottom>\n            Design Your Palette\n          </Typography>\n          <div className={classes.buttons}>\n              <Button \n                variant=\"contained\" \n                color=\"secondary\" \n                onClick={this.clearColors}\n                className={classes.button}\n              >\n                Clear Palette\n              </Button>\n              <Button \n                variant=\"contained\" \n                className={classes.button}\n                color=\"primary\"\n                onClick={this.addRandomColor}\n                disabled={paletteIsFull}\n              >\n                RandomColor\n              </Button>\n            </div>             \n            <ColorPickerForm  \n              paletteIsFull={paletteIsFull} \n              addNewColor={this.addNewColor}\n              colors={colors}\n            />\n            </div>\n          </Drawer>\n          <main\n            className={classNames(classes.content, {\n              [classes.contentShift]: open,\n            })}\n          >\n            <div className={classes.drawerHeader} />\n            <DraggableColorList \n              colors={colors}\n              removeColor={this.removeColor}\n              axis='xy'\n              onSortEnd={this.onSortEnd}\n              distance={10}\n            />\n          </main>\n        </div>\n      );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}