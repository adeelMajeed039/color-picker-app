{"ast":null,"code":"import _defineProperty from \"/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/NewPaletteForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport PaletteFormNav from './PaletteFormNav';\nimport ColorPickerForm from './ColorPickerForm';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport { arrayMove } from 'react-sortable-hoc';\nimport seedColors from './seedColors';\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: _objectSpread({\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\"\n  }, theme.mixins.toolbar, {\n    justifyContent: \"flex-end\"\n  }),\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.state = {\n      open: true,\n      colors: seedColors[0].colors\n    };\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeColor = this.removeColor.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.addRandomColor = this.addRandomColor.bind(this); // this.onSortEnd = this.onSortEnd.bind(this);\n  }\n\n  addNewColor(newColor) {\n    this.setState({\n      colors: [...this.state.colors, newColor],\n      newColorName: \"\"\n    });\n  }\n\n  clearColors() {\n    this.setState({\n      colors: []\n    });\n  }\n\n  addRandomColor() {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    var rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    this.setState({\n      colors: [...this.state.colors, randomColor]\n    }); // console.log(allColors);\n  }\n\n  handleSubmit(newPaletteName) {\n    const newPalette = {\n      paletteName: newPaletteName,\n      id: newPaletteName.toLowerCase().replace(/ /g, \"-\"),\n      colors: this.state.colors\n    };\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  }\n\n  removeColor(colorName) {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          maxColors = _this$props.maxColors,\n          palettes = _this$props.palettes;\n    const _this$state = this.state,\n          open = _this$state.open,\n          colors = _this$state.colors;\n    const paletteIsFull = colors.length >= maxColors; // console.log(maxColors);\n\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(PaletteFormNav, {\n      open: open,\n      classes: classes,\n      palettes: palettes,\n      handleSubmit: this.handleSubmit,\n      handleDrawerOpen: this.handleDrawerOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearColors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Clear Palette\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.addRandomColor,\n      disabled: paletteIsFull,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"RandomColor\")), React.createElement(ColorPickerForm, {\n      paletteIsFull: paletteIsFull,\n      addNewColor: this.addNewColor,\n      colors: colors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(DraggableColorList, {\n      colors: this.colors,\n      removeColor: this.removeColor,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    })));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/home/muhammadatif/Documents/Project/React/Colorsfinal/colrs-final-app/src/NewPaletteForm.js"],"names":["React","Component","classNames","withStyles","PaletteFormNav","ColorPickerForm","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","Button","DraggableColorList","arrayMove","seedColors","styles","theme","root","display","hide","drawer","width","drawerWidth","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","contentShift","easeOut","enteringScreen","NewPaletteForm","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","onSortEnd","oldIndex","newIndex","colors","state","addNewColor","bind","handleSubmit","removeColor","clearColors","addRandomColor","newColor","newColorName","allColors","palettes","map","p","flat","rand","Math","floor","random","length","randomColor","newPaletteName","newPalette","paletteName","id","toLowerCase","replace","savePalette","history","push","colorName","filter","color","name","render","classes","maxColors","paletteIsFull","paper","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport PaletteFormNav from './PaletteFormNav';\nimport ColorPickerForm from './ColorPickerForm';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport { arrayMove } from 'react-sortable-hoc';\nimport seedColors from './seedColors';\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\",\n  },\n \n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0,\n  },\n});\n\nclass NewPaletteForm extends Component {\n  static defaultProps = {\n    maxColors: 20\n  };\n  constructor(props){\n    super(props);\n    this.state = {\n      open: true,\n      colors: seedColors[0].colors\n    };\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeColor = this.removeColor.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.addRandomColor = this.addRandomColor.bind(this);\n      // this.onSortEnd = this.onSortEnd.bind(this);\n  }\n    \n  handleDrawerOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ open: false });\n  };\n  \n  addNewColor(newColor) {\n    this.setState({ colors: [...this.state.colors, newColor], newColorName: \"\" });\n  }\n\n  clearColors(){\n    this.setState({ colors : [] });\n  }\n    \n  addRandomColor() {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    var rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    this.setState({ colors: [...this.state.colors, randomColor] });\n    // console.log(allColors);\n  }\n\n  handleSubmit(newPaletteName) {\n    const newPalette = {\n      paletteName: newPaletteName,\n      id: newPaletteName.toLowerCase().replace(/ /g, \"-\"),\n      colors: this.state.colors\n    };\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  }\n  \n  removeColor(colorName) {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  }\n  \n  onSortEnd = ({ oldIndex, newIndex }) => {\n    this.setState(({ colors }) => ({\n      colors: arrayMove(colors, oldIndex, newIndex),\n    }));\n  };\n   \n  render(){ \n    const { classes, maxColors, palettes } = this.props;\n    const { open, colors } = this.state;\n    const paletteIsFull = colors.length >= maxColors;\n// console.log(maxColors);\n      return (\n        <div className={classes.root}>\n          <PaletteFormNav \n            open={open} \n            classes={classes} \n            palettes={palettes} \n            handleSubmit={this.handleSubmit}\n            handleDrawerOpen={this.handleDrawerOpen}\n          />\n          <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"left\"\n            open={open}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n          >\n            <div className={classes.drawerHeader}>\n              <IconButton onClick={this.handleDrawerClose}>\n                  <ChevronLeftIcon />\n                    </IconButton>\n            </div>\n            <Divider />\n            <Typography variant=\"h4\">\n              Design Your Palette\n            </Typography>\n            <div>\n              <Button \n                variant=\"contained\" \n                color=\"secondary\" \n                onClick={this.clearColors}\n              >\n                Clear Palette\n              </Button>\n              <Button \n                variant=\"contained\" \n                color=\"primary\"\n                onClick={this.addRandomColor}\n                disabled={paletteIsFull}\n              >\n                RandomColor\n              </Button>\n            </div>             \n            <ColorPickerForm  \n              paletteIsFull={paletteIsFull} \n              addNewColor={this.addNewColor}\n              colors={colors}\n            />\n          </Drawer>\n          <main\n            className={classNames(classes.content, {\n              [classes.contentShift]: open,\n            })}\n          >\n            <div className={classes.drawerHeader} />\n            <DraggableColorList \n              colors={this.colors}\n              removeColor={this.removeColor}\n              axis='xy'\n              onSortEnd={this.onSortEnd}\n            />\n          </main>\n        </div>\n      );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}